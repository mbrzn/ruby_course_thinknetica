# Квадратное уравнение.
# Пользователь вводит 3 коэффициента a, b и с. Программа вычисляет 
# дискриминант (D) и корни уравнения (x1 и x2, если они есть) и выводит 
# значения дискриминанта и корней на экран. При этом возможны следующие варианты:
#   Если D > 0, то выводим дискриминант и 2 корня
#   Если D = 0, то выводим дискриминант и 1 корень (т.к. корни в этом случае равны)
#   Если D < 0, то выводим дискриминант и сообщение "Корней нет"
#
# Подсказка: Алгоритм решения с блок-схемой (www.bolshoyvopros.ru). 
# Для вычисления квадратного корня, нужно использовать  Math.sqrt

def parser_3_number(str)
  # допустимые разделители аргументов
  separators = [ ",", "#", " ", "-", ";", ":" ]
  separators.each do |separator| 
    list = str.split(separator)
    if list.size == 3 
      # подходящий разделить трех чисел найден
      list.map! { |i| i.to_f }
      puts "Аргументы программы:#{list}"
      return list
    end
  end
  # ни один разделитель не соответствует тройке чисел
  abort "ERROR. Число аргументов не равно трем: #{list}"
end

print "\nНайти корни квадратного уравнения.\nВведите старший и средний коэффициенты (a, b) и свободный член (с): "
str = gets.chomp
a_b_c = parser_3_number(str)	# конвертировать строку в массив трех чисел


# определитель корней квадратного уравнения
# возвращает массив корней уравнения
#
def roots_qe(a_b_c)
  a = a_b_c[0]; b = a_b_c[1]; c = a_b_c[2]
  roots = [ nil, nil ]
  d = b**2-4*a*c 
  case 
  when d == 0
    #   Если D = 0, то выводим дискриминант и 1 корень (т.к. корни в этом случае равны)
    x = -1.0 * b / (2*a) 
    roots = [ x, x ]
    puts "\nD = 0, x1 и x2 = #{roots}"
  when d > 0
    #   Если D > 0, то выводим дискриминант и 2 корня
    roots[0] = (-1.0 * b - Math.sqrt(d)) / (2*a)
    roots[1] = (-1.0 * b + Math.sqrt(d)) / (2*a)
    puts "\nD = #{d}, x1 и x2 = #{roots}"
  else
    #   Если D < 0, то выводим дискриминант и сообщение "Корней нет"
    puts "\nD = #{d}. Корней нет. x1 и x2 = #{roots}"
  end 
  return roots
end

roots_qe(a_b_c)

